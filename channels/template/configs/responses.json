{
    "usernotice": {
        "sub": {
            "msg_standard": {
                "msg": "<3 <USER>, thank you for subbing with <SUBPLAN> Welcome to the channel! <3",
                "info": "Message that gets posted when a viewer subscribes to the channel for the first time.",
                "args_info": {
                    "<USER>": "User who subribed to the channel.",
                    "<SUBPLAN>": "Type of subscription (Twitch Prime, 4,99€, etc.)"
                }
            },
            "msg_with_months": {
                "msg": "PogChamp <USER>, thank you for subbing with <SUBPLAN> Welcome back for <MONTHS> years! PogChamp",
                "info": "Message that gets posted when a viewer resubscribes to the channel.",
                "args_info": {
                    "<USER>": "User who resubribed to the channel.",
                    "<SUBPLAN>": "Type of subscription (Twitch Prime, 4,99€, etc.)",
                    "<MONTHS>": "Amount of months the user is subscribed to the channel."
                }
            },
            "subplan": {
                "msg": {
                    "Prime": "Twitch Prime!! SeemsGood",
                    "1000": "4,99$!! VoHiYo",
                    "2000": "9,99$!! FeelsGoodMan",
                    "3000": "24,99$!! Jebaited"
                },
                "info": "Arguments for subscribtion/resubscription messages.",
                "args_info": ""
            }
        },
        "subgift": {
            "msg_standard": {
                "msg": "PogChamp <DONOR> gifted a <SUBPLAN> sub to <RECIPIENT>! Thanks and welcome to the channel! <3",
                "info": "Message that gets posted when a viewer received a donated sub to the channel.",
                "args_info": {
                    "<DONOR>": "User who donated a sub.",
                    "<RECIPIENT>": "User who received a sub.",
                    "<SUBPLAN>": "Type of subscription (4,99€, 9,99€, etc.)"
                }
            },
            "msg_with_months": {
                "msg": "Kreygasm <DONOR> gifted a <SUBPLAN> sub to <RECIPIENT>! Thanks both of you SeemsGood It is <MONTHS> years already! PogChamp",
                "info": "Message that gets posted when an existing subscriber receive a sub donation to the channel.",
                "args_info": {
                    "<DONOR>": "User who donated a sub.",
                    "<RECIPIENT>": "User who received a sub.",
                    "<SUBPLAN>": "Type of subscription (4,99€, 9,99€, etc.)",
                    "<MONTHS>": "Amount of months the user is subscribed to the channel."
                }
            },
            "subplan": {
                "msg": {
                    "1000": "4,99$!! TwitchUnity",
                    "2000": "9,99$!! FeelsAmazingMan",
                    "3000": "24,99$!! gachiGASM"
                },
                "info": "Arguments for subscribtion/resubscription messages.",
                "args_info": ""
            }
        },
        "ritual": {
            "new_chatter": {
                "msg": "Welcome to the channel VoHiYo <NAME>",
                "info": "Message for ritual of new viewer",
                "args_info": {
                    "<NAME>": "Name of new chatter"
                }
            }
        },
        "raid": {
            "msg": "PogChamp <AMOUNT> raiders from <CHANNEL> PogChamp Chat get ready for defense SMOrc",
            "info": "Message when getting raided",
            "args_info": {
                "<AMOUNT>": "Number of raiders",
                "<CHANNEL>": "Source of raider"
            }
        }
    },
    "EmoteReply": {
        "call_reply": {
            "msg": "<EMOTE> NOW <EMOTE> THIS <EMOTE> IS <EMOTE> WHAT <EMOTE> I <EMOTE> CALL <EMOTE>",
            "info": "Reply for '!call'-command. Followed by the text specified by the user.",
            "args_info": {
                "<EMOTE>": "Emote that gets used in the call command."
            }
        }
    },
    "EditCommandMods": {
        "mod_added": {
            "msg": "Mod added. SeemsGood",
            "info": "Reply if a mod got added to the trusted mod list.",
            "args_info": {}
        },
        "already_mod": {
            "msg": "<USER> is already a mod. monkaS",
            "info": "Reply if someone tries to add a user who is already on the trusted mod list.",
            "args_info": {
                "<USER>": "User who is already in the trusted mod list."
            }
        },
        "mod_deleted": {
            "msg": "Mod removed. SeemsGood",
            "info": "Reply if a mod got removed to the trusted mod list.",
            "args_info": {}
        },
        "user_not_in_list": {
            "msg": "<USER> is not a trusted mod. monkaS",
            "info": "Reply if someone tries to remove a user who not on the trusted mod list.",
            "args_info": {
                "<USER>": "User who should be removed from the trusted mod list."
            }
        }
    },
    "EditCommandList": {
        "cmd_already_exists": {
            "msg": "Command already in the list! DansGame",
            "info": "Reply if the command is already in the list.",
            "args_info": {}
        },
        "cmd_added": {
            "msg": "Command '<COMMAND>' added! FeelsGoodMan",
            "info": "Reply if the command has been added to the list.",
            "args_info": {
                "<COMMAND>": "Command that has been added to the list."
            }
        },
        "cmd_removed": {
            "msg": "Command '<COMMAND>' deleted. FeelsBadMan",
            "info": "Reply if the command has been removed from the list.",
            "args_info": {
                "<COMMAND>": "Command that has been removed to the list."
            }
        },
        "cmd_not_found": {
            "msg": "Command '<COMMAND>' does not exist. monkaS",
            "info": "Reply if someone tries to remove a command that is not on the list.",
            "args_info": {
                "<COMMAND>": "Command that should be removed from the list."
            }
        }
    },
    "outputStats": {
        "total_reply": {
            "msg": "Total <EMOTE> 's on this channel: <AMOUNT>",
            "info": "Reply for total emote count. ('!total <EMOTE>')",
            "args_info": {
                "<EMOTE>": "Emote that user wants to get information about.",
                "<AMOUNT>": "Total amount of emotes posted in this channel."
            }
        },
        "minute_reply": {
            "msg": "<EMOTE> 's per minute: <AMOUNT>",
            "info": "Reply for emotes per minute count. ('!minute <EMOTE>')",
            "args_info": {
                "<EMOTE>": "Emote that user wants to get information about.",
                "<AMOUNT>": "Amount of emotes posted in the last minute in this channel."
            }
        }
    },
    "outputQuote": {
        "not_found": {
            "msg": "Quote not found. Try: !quote [1 - <N_QUOTES>]",
            "info": "Reply if user specified a quote number that is not in the list.",
            "args_info": {
                "<N_QUOTES>": "Total amount of available quotes."
            }
        },
        "wrong_input": {
            "msg": "Wrong input for , try !quote <NUMBER>",
            "info": "Reply if user uses wrong kind of input for '!quote <NUMBER>'.",
            "args_info": {}
        }
    },
    "editQuoteList": {
        "quote_added": {
            "msg": "Quote has been added. FeelsGoodMan",
            "info": "Reply if a quote has been added. ('!addquote <QUOTE>')",
            "args_info": {}
        },
        "quote_exists": {
            "msg": "Quote is already in the list. :thinking:",
            "info": "Reply if user tries to add a quote that's already in the list.",
            "args_info": {}
        },
        "quote_removed": {
            "msg": "Quote has been removed. FeelsBadMan",
            "info": "Reply if a quote has been deleted. ('!delquote <QUOTE>')",
            "args_info": {}
        },
        "quote_not_found": {
            "msg": "Quote not found. :thinking:",
            "info": "Reply if user tries to remove a quote that's not in the list.",
            "args_info": {}
        }
    },
    "Calculator": {
        "div_by_zero": {
            "msg": "@<USER> AjhHdjsTmab beep boop can_not-Calcuasdjnasjd---SHUTTING DOWN....... Just kidding 4Head",
            "info": "Reply if user tries to devide by zero.",
            "args_info": {
                "<USER>": "User who used the command."
            }
        },
        "number_overflow": {
            "msg": "@<USER> It's too big Kreygasm",
            "info": "Reply if the calculation yields a too large number.",
            "args_info": {
                "<USER>": "User who used the command."
            }
        },
        "wrong_input": {
            "msg": "@<USER> ??? 4Head",
            "info": "Reply if wrong input in '!calc' command.",
            "args_info": {
                "<USER>": "User who used the command."
            }
        },
        "default_error": {
            "msg": "@<USER> <EXPRESSION> = ???",
            "info": "Reply if the calculation expression can't be executed by the function.",
            "args_info": {
                "<USER>": "User who used the command.",
                "<EXPRESSION>": "Calculation expression that can't be executed."
            }
        }
    },
    "PyramidBlock": {
        "block_activate": {
            "msg": "Blocking pyramids now. monkaS",
            "info": "Write message if PyramidBlock gets activated.",
            "args_info": {}
        },
        "block_already_on": {
            "msg": "I'm already blocking pyramids. DansGame",
            "info": "Write message if user tries to activate PyramidBlock while it's already on.",
            "args_info": {}
        },
        "block_deactivate": {
            "msg": "No longer blocking pyramids. FeelsBadMan",
            "info": "Write message if PyramidBlock gets deactivated.",
            "args_info": {}
        },
        "block_already_off": {
            "msg": "I wasn't blocking pyramids. DansGame",
            "info": "Write message if user tries to deactivate PyramidBlock while it's not on.",
            "args_info": {}
        }
    },
    "Pyramid": {
        "pyramidblocks": {
            "msg": [
                "A pyramid (from Greek: πυραμίς pyramis)[1][2] is a structure whose outer surfaces are triangular and converge to a single point at the top, making the shape roughly a pyramid in the geometric sense.",
                "no 4Head",
                "Almost a pyramid PogChamp",
                "Not on my watch OpieOP",
                "Sorry, did I interrupt you? monkaS",
                "(⌐■_■)–︻╦╤─ TheIlluminati",
                "LUL Come on"
            ],
            "info": "Pyramid block messages while PyramidBlock is on.",
            "args_info": {}
        },
        "finishingtaunt": {
            "msg": [
                "I type this in less than 0.00000069 second EZ",
                "Try faster next time OpieOP",
                "You wish you were that fast DatSheffy",
                "Just give up plz FailFish",
                "I saved you from plebramid ban 4Head Thanks me for that Kappa",
                "Why do I even complete this pyramid FeelsBadMan",
                "I don't get points for doing this BibleThump"
            ],
            "info": "Pyramid finishing taunt messages from bot when she finish pyramid while PyramidBlock is on.",
            "args_info": {}
        },
        "plebpyramid": {
            "msg": "Wow, <USER> built a pleb pyramid and <PRONOUN0> gets a free timeout. 4Head",
            "info": "Write message if a user completes a 3-part pyramid and gets timed-out.",
            "args_info": {
                "<USER>": "User who built the pyramid.",
                "<PRONOUN0>": "Pronoun for the user."
            }
        },
        "mod_plebpyramid": {
            "msg": "<USER> created a pleb pyramid and would get a free timeout, but <PRONOUN0> is a mod. FeelsBadMan",
            "info": "Write message if a channel moderator completes a 3-part pyramid.",
            "args_info": {
                "<USER>": "User who built the pyramid.",
                "<PRONOUN0>": "Pronoun for the user."
            }
        },
        "multi_plebpyramid": {
            "msg": "Wow, <MULTIUSERS> built a pleb pyramid and they all get a free timeout. 4Head",
            "info": "Write message if multiple users complete a 3-part pyramid and get timed-out.",
            "args_info": {
                "<MULTIUSERS>": "Users who built the pyramid together."
            }
        },
        "pyramid": {
            "msg": "<USER> built a pyramid and <PRONOUN0> gets <AMOUNT> spam points. PogChamp",
            "info": "Write message if a user completes a 5-part pyramid and gets points as reward.",
            "args_info": {
                "<USER>": "User who built the pyramid.",
                "<PRONOUN0>": "Pronoun for the user.",
                "<AMOUNT>": "Amount of points the user gets for completing the pyramid."
            }
        },
        "multi_pyramid": {
            "msg": "Teamwork! PogChamp <MULTIUSERS> built a pyramid. They get <AMOUNT> spam points. KappaClaus",
            "info": "Write message if multiple users complete a 5-part pyramid and get points as reward.",
            "args_info": {
                "<MULTIUSERS>": "Users who built the pyramid together.",
                "<AMOUNT>": "Amount of points the user gets for completing the pyramid."
            }
        }
    },
    "KappaGame": {
        "start_msg": {
            "msg": "/me ▬▬▬▬▬▬▬▬▬▬▬ஜ۩۞۩ஜ▬▬▬▬▬▬▬▬▬▬▬ Kappa game has started. Guess the right amount of Kappa s between 1 and 25! PogChamp ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬",
            "info": "Announce the start of the KappaGame.",
            "args_info": {}
        },
        "stop_msg": {
            "msg": "Stopping the Kappa game! FeelsBadMan",
            "info": "Write message if the KappaGame gets canceled.",
            "args_info": {}
        },
        "winner_msg": {
            "msg": "/me <USER> got it! It was <AMOUNT> Kappa s!",
            "info": "Write message if a user wins the Kappa game and gets points as reward.",
            "args_info": {
                "<USER>": "User who won the KappaGame.",
                "<AMOUNT>": "Right amount of Kappa's to win the game."
            }
        },
        "wrong_amount": {
            "msg": "It's not <AMOUNT>. 4Head",
            "info": "Write the message if user guesses the wrong amount of Kappas.",
            "args_info": {
                "<AMOUNT>": "Wrong amount of Kappa's input by the user."
            }
        }
    },
    "GuessEmoteGame": {
        "start_msg": {
            "msg": "/me The 'Guess The Emote Game' has started. Write one of the following emotes to start playing: <MULTIEMOTES>",
            "info": "Announce the start of the GuessEmoteGame.",
            "args_info": {
                "<MULTIEMOTES>": "Possible emotes for the GuessEmoteGame."
            }
        },
        "stop_msg": {
            "msg": "Stopping the Emote Game! FeelsBadMan",
            "info": "Write message if the GuessEmoteGame gets canceled.",
            "args_info": {}
        },
        "winner_msg": {
            "msg": "/me <USER> got it! It was <EMOTE> . <PRONOUN0> gets <AMOUNT> spam points.",
            "info": "Write message if a user wins the GuessEmoteGame and gets points as reward.",
            "args_info": {
                "<USER>": "User who won the GuessEmoteGame.",
                "<EMOTE>": "Right emote to win the GuessEmoteGame",
                "<PRONOUN0>": "Pronoun0 of the user.",
                "<AMOUNT>": "Amount of points the user gets for winning the game."
            }
        },
        "emote_msg": {
            "msg": "Possible game emotes: <MULTIEMOTES>",
            "info": "Reply possible emotes for the game on '!emotes' command while the game is running.",
            "args_info": {
                "<MULTIEMOTES>": "Possible emotes for the GuessEmoteGame."
            }
        }
    },
    "GuessMinionGame": {
        "clue_stat": {
            "msg": "/me The minion is a <STAT> card.",
            "info": "Give clue about the class of the card.",
            "args_info": {
                "<STAT>": "Class of the card."
            }
        },
        "clue_set": {
            "msg": "/me The card is from the <STAT> set.",
            "info": "Give clue from which set the card is from.",
            "args_info": {
                "<STAT>": "The set in which the card was released."
            }
        },
        "setnames": {
            "msg": {
                "EXPERT1": "CLASSIC",
                "CORE": "CLASSIC",
                "HOF": "CLASSIC",
                "OG": "Whispers of the Old Gods",
                "GANGS": "Mean Streets of Gadgetzan",
                "KARA": "One Night in Karazhan",
                "ICECROWN": "Knights of the Frozen Throne",
                "TGT": "The Grand Tournament",
                "BRM": "Blackrock Mountain",
                "UNGORO": "Journey to Un'Goro",
                "NAXX": "Curse of Naxxramas",
                "GVG": "Goblins vs Gnomes",
                "LOE": "The League of Explorers",
                "LOOTAPALOOZA": "Kobolds and Catacombs",
                "GILNEAS": "The Witchwood"
            },
            "info": "Hearthstone set name conversion.",
            "args_info": {}
        },
        "clue_letter": {
            "msg": "/me The name of the card starts with '<STAT>'.",
            "info": "Give the first letter of the minion's name as clue.",
            "args_info": {
                "<STAT>": "The first letter of the name of the minion."
            }
        },
        "clue_rarity": {
            "msg": "/me The minion is a '<STAT>' card.",
            "info": "Give clue about the rarity of the card.",
            "args_info": {
                "<STAT>": "Rarity of the card."
            }
        },
        "clue_attackpower": {
            "msg": "/me The minion has <STAT> attackpower.",
            "info": "Give clue about the attackpower of the minion.",
            "args_info": {
                "<STAT>": "Attackpower of the minion."
            }
        },
        "clue_manacost": {
            "msg": "/me The card costs <STAT> mana.",
            "info": "Give clue about the manacosts of the minion.",
            "args_info": {
                "<STAT>": "Manacosts of the minion."
            }
        },
        "clue_healthpoints": {
            "msg": "/me The minion has <STAT> healthpoint<PLURAL>.",
            "info": "Give clue about the healthpoints of the minion.",
            "args_info": {
                "<STAT>": "Healthpoints of the minion.",
                "<PLURAL>": "Add an 's' if stat > 1"
            }
        },
        "start_msg": {
            "msg": "/me ▬▬▬▬▬▬▬▬▬▬▬ஜ۩۞۩ஜ▬▬▬▬▬▬▬▬▬▬▬ The 'Guess The Minion Game' has started. Type minion names to play. monkaS ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬",
            "info": "Announce the start of the GuessMinionGame.",
            "args_info": {}
        },
        "stop_msg": {
            "msg": "Stopping the Minion Game! FeelsBadMan",
            "info": "Write message if the GuessMinionGame gets canceled.",
            "args_info": {}
        },
        "winner_msg": {
            "msg": "/me <USER> got it! It was <MINION>. <PRONOUN0> gets <AMOUNT> spam points.",
            "info": "Write message if a user wins the GuessMinionGame and gets points as reward.",
            "args_info": {
                "<USER>": "User who won the GuessMinionGame.",
                "<MINION>": "Right minion name to win the GuessMinionGame",
                "<PRONOUN0>": "Pronoun0 of the user.",
                "<AMOUNT>": "Amount of points the user gets for winning the game."
            }
        }
    },
    "AutoGames": {
        "autogames_activate": {
            "msg": "AUTOMATIC GAME MODE ACTIVATED! MrDestructoid",
            "info": "Write message if AutoGames get activated.",
            "args_info": {}
        },
        "autogames_already_on": {
            "msg": "Automatic games are already on! DansGame",
            "info": "Write message if user tries to activate AutoGames while it's already on.",
            "args_info": {}
        },
        "autogames_deactivate": {
            "msg": "Automatic game mode deacti... ResidentSleeper",
            "info": "Write message if AutoGames get deactivated.",
            "args_info": {}
        },
        "autogames_already_off": {
            "msg": "Automatic games were not even active! EleGiggle",
            "info": "Write message if user tries to deactivate AutoGames while they're not on.",
            "args_info": {}
        }
    },
    "Notifications": {
        "empty_list": {
            "msg": "WARNING: No notifications found! Turning off notifications.",
            "info": "Write message if the bot tries to send a notification in chat, but the list is empty.",
            "args_info": {}
        },
        "notifications_activate": {
            "msg": "Notifications activated",
            "info": "Write message if Notifications get activated.",
            "args_info": {}
        },
        "notifications_already_on": {
            "msg": "Notifications are already on.",
            "info": "Write message if user tries to activate Notifications while they are already on.",
            "args_info": {}
        },
        "notifications_deactivate": {
            "msg": "Notifications deactivated.",
            "info": "Write message if Notifications get deactivated.",
            "args_info": {}
        },
        "notifications_already_off": {
            "msg": "Notifications were already off.",
            "info": "Write message if user tries to deactivate Notifications while they're not on.",
            "args_info": {}
        },
        "notification_added": {
            "msg": "Notification added!",
            "info": "Reply if a notification has been added. ('!addnotification <NOTIFICATION>')",
            "args_info": {}
        },
        "notification_exists": {
            "msg": "Notification already in the list!",
            "info": "Reply if user tries to add a notification that's already in the list.",
            "args_info": {}
        },
        "notification_removed": {
            "msg": "Notification deleted!",
            "info": "Reply if a notification has been deleted. ('!delnotification <NOTIFICATION>')",
            "args_info": {}
        },
        "notification_not_found": {
            "msg": "Notification not in the list!",
            "info": "Reply if user tries to remove a notification that's not in the list.",
            "args_info": {}
        }
    },
    "Pronouns": {
        "pronoun_added": {
            "msg": "Successfully added pronouns monkaS .",
            "info": "Message after a set of pronouns have been added for a user.",
            "args_info": {}
        }
    },
    "Rank": {
        "display_rank": {
            "msg": "<USER> is rank <RANK> with <POINTS> spampoints. monkaS",
            "info": "Display the rank and points of the user.",
            "args_info": {
                "<USER>": "User whose rank and points are displayed.",
                "<RANK>": "Rank of the user.",
                "<POINTS>": "Points of the user."
            }
        },
        "user_not_found": {
            "msg": "Can't find that user DansGame",
            "info": "Message for !rank then input a person that can't be found",
            "args_info": {}
        }
    },
    "TopSpammers": {
        "heading": {
            "msg": "Top spammers: ",
            "info": "Heading of the topspammers command.",
            "args_info": {}
        }
    },
    "Sleep": {
        "bot_deactivate": {
            "msg": "Going to sleep... bye! ResidentSleeper",
            "info": "Display message when bot gets deactivated.",
            "args_info": {}
        },
        "bot_activate": {
            "msg": "Good morning everyone! FeelsGoodMan /",
            "info": "Display message when bot gets activated.",
            "args_info": {}
        }
    },
    "BanMe": {
        "success": {
            "msg": "Sure DatSheffy",
            "info": "Display message when plebs want to got banned",
            "args_info": {}
        },
        "fail": {
            "msg": "DansGame",
            "info": "Display message when mods want to got banned",
            "args_info": {}
        }
    },
    "startGame": {
        "points_needed": {
            "msg": "You need <AMOUNT> points to start a game.",
            "info": "Show message if a user wants to start a game but doesn't have enough points.",
            "args_info": {
                "<AMOUNT>": "Amount of points needed to start a game."
            }
        },
        "plebgames_on_cooldown": {
            "msg": "Only mods can start chatgames for another <COOLDOWN> seconds. monkaS",
            "info": "Show message if a non-mod user wants to start a game while the plebgames are still on cooldown.",
            "args_info": {
                "<COOLDOWN>": "Time until plebgames are available again."
            }
        }
    },
    "Oralpleasure": {
        "op_already_on": {
            "msg": "Oralpleasure is already on! Jebaited",
            "info": "Show message if someone tries to activate op while it's already on.",
            "args_info": {}
        },
        "op_activate": {
            "msg": "Oralpleasure is now on! Kreygasm",
            "info": "Display message when op gets activated.",
            "args_info": {}
        },
        "op_deactivate": {
            "msg": "Oralpleasure is now off! FeelsBadMan",
            "info": "Display message when op gets deactivated.",
            "args_info": {}
        },
        "op_already_off": {
            "msg": "Oralpleasure was already off! monkaS",
            "info": "Show message if someone tries to deactivate op while it's already off.",
            "args_info": {}
        }
    },
    "MonkalotParty": {
        "game_over1": {
            "msg": "Monkalot Party is over! ",
            "info": "Part 1 of the message that gets displayed when MonkalotParty is over.",
            "args_info": {}
        },
        "game_over2": {
            "msg": "There was no clear winner ... FeelsBadMan",
            "info": "Part 2 of the message that gets displayed when MonkalotParty is over and there is no clear winner.",
            "args_info": {}
        },
        "game_over3": {
            "msg": "got 1st place with <GAME_POINTS> points and get <USER_POINTS> extra spampoints! PogChamp Clap",
            "info": "Part 2 of the message that gets displayed when MonkalotParty is over and there are one or more winners.",
            "args_info": {
                "<GAME_POINTS>": "Amount of games the winner/s won in MonkalotParty.",
                "<USER_POINTS>": "Amount of points the users get for getting 1st place in MonkalotParty."
            }
        },
        "start_msg": {
            "msg": "/me ▬▬▬▬▬▬▬▬▬▬▬ஜ۩۞۩ஜ▬▬▬▬▬▬▬▬▬▬▬ PepePls PogChamp MONKALOTPARTY HAS STARTED ! Jebaited PepePls Kappa gachiGASM PepePls FeelsGoodMan 4Head EZ Clap PepePls LUL Kreygasm FeelsBadMan ▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬ monkaS Get ready for games in 5 ... 4 ... 3 ... 2 ... 1 ... monkaS",
            "info": "Announce the start of the MonkalotParty.",
            "args_info": {}
        },
        "stop_msg": {
            "msg": "Stopping Monkalot Party! FeelsBadMan",
            "info": "Write message if the MonkalotParty gets canceled.",
            "args_info": {}
        },
        "winner_msg": {
            "msg": "/me <USER> got it first and gets 5 points. The answer was: <ANSWER>",
            "info": "Write message if a user wins a minigame in MonkalotParty and gets points as reward.",
            "args_info": {
                "<USER>": "User who won the minigame.",
                "<ANSWER>": "Right answer to the minigame."
            }
        }
    },
    "StreamInfo": {
        "bttv_msg": {
            "msg": "Available BTTV emotes: <MULTIEMOTES>",
            "info": "Display all channel specific BTTV emotes.",
            "args_info": {
                "<MULTIEMOTES>": "List of channel specific BTTV emotes."
            }
        },
        "stream_off": {
            "msg": "Stream is not running at the moment.",
            "info": "Display if stream is offline while someone tries to access stream informations.",
            "args_info": {}
        },
        "fps_msg": {
            "msg": "Average FPS of the stream: <FPS>",
            "info": "Display the average fps of the stream.",
            "args_info": {
                "<FPS>": "Average fps of the stream."
            }
        },
        "uptime": {
            "msg": "Channel has been live for <HOURS>h <MINUTES>min <SECONDS>sec",
            "info": "Display the time the stream has been online for.",
            "args_info": {
                "<HOURS>": "Hours of uptime",
                "<MINUTES>": "Minutes of uptime",
                "<SECONDS>": "Seconds of uptime"
            }
        }
    },
    "ranking": {
        "msg_legend": {
            "msg": "<USER> just reached <RANK>!! PogChamp Clap",
            "info": "Display if a user reaches legend rank for the first time.",
            "args_info": {
                "<USER>": "User who just reached legend.",
                "<RANK>": "Legend Rank of the user."
            }
        }
    },
    "userignore": {
        "ignore": {
            "privileged": {
                "msg": "Stop trolling, <USER> can't be ignored DansGame",
                "info": "Error message of trying to ignore mods/bots/owners.",
                "args_info": {
                    "<USER>": "That unignorable user."
                }
            },
            "already": {
                "msg": "<USER> is already ignored FeelsBadMan",
                "info": "Error message of trying to ignore users already ignored.",
                "args_info": {
                    "<USER>": "That poor already ignored user."
                }
            },
            "success": {
                "msg": "A mod tells me to ignore <USER>. BibleThump",
                "info": "Success message of trying to ignore a user.",
                "args_info": {
                    "<USER>": "That user to ignore."
                }
            }
        },
        "unignore": {
            "success": {
                "msg": "I can talk to <USER> again now FeelsGoodMan",
                "info": "Message to unignore ignored users.",
                "args_info": {
                    "<USER>": "That user."
                }
            },
            "already": {
                "msg": "<USER> is not ignored at all DansGame",
                "info": "Error message of trying to unignore unignored users.",
                "args_info": {
                    "<USER>": "That user."
                }
            }
        }
    },
    "Tip": {
        "numbererror": {
            "msg": "The tip amount has to be a whole number between <MINTIP> and <MAXTIP>.",
            "info": "Display if a user uses wrong input for tip amount.",
            "args_info": {
                "<MINTIP>": "Minimum amount of points for tipping.",
                "<MAXTIP>": "Maximum amount of points for tipping."
            }
        },
        "cooldown": {
            "msg": "@<USER> You can tip again in <TIMER> seconds. (Once every <COOLDOWN> minutes) monkaS",
            "info": "Display if a user uses wrong input for tip amount.",
            "args_info": {
                "<USER>": "User who sent the tip.",
                "<TIMER>": "Time until the user can tip again.",
                "<COOLDOWN>": "Time between two tips."
            }
        },
        "tipsend": {
            "msg": "<USER> just send <TARGET> <AMOUNT> spampoints. <TYPE>",
            "info": "Display if a user uses wrong input for tip amount.",
            "args_info": {
                "<USER>": "User who sent the tip.",
                "<TARGET>": "User who recieved the tip.",
                "<AMOUNT>": "Amount of points tipped.",
                "<TYPE>": "Depending on the type of tip a specific emote is send."
            }
        },
        "notenough": {
            "msg": "@<USER> You do not even have <AMOUNT> points to donate. PepeHands",
            "info": "Display if a user uses wrong input for tip amount.",
            "args_info": {
				"<USER>": "User who tried to send the tip.",
                "<AMOUNT>": "Amount of points tipped."
            }
        }
    }
}
